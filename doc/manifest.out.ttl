@prefix dcterms:   <http://purl.org/dc/terms/> .
@prefix pav:       <http://purl.org/pav/> .
@prefix dcat:      <http://www.w3.org/ns/dcat#> .
@prefix rdr:       <http://www.re3data.org/schema/3-0> .
@prefix prov:      <http://www.w3.org/ns/prov#> .
@prefix rdfs:      <https://www.w3.org/2000/01/rdf-schema#> .

@prefix saved:     <https://marine.gov.scot/metadata/saved/schema/> .
@prefix job:       <https://marine.gov.scot/metadata/saved/schema/job_> .
@prefix ext:       <https://marine.gov.scot/metadata/saved/schema/ext_> .
@prefix service:   <https://marine.gov.scot/metadata/saved/rap/> .
@prefix stage:     <https://marine.gov.scot/metadata/saved/rap/stage_> .

@base          <https://marine.gov.scot/metadata/saved/rap_service_v0.3/66f1b101-7c04-4413-9258-48ae938cf260/> .
@prefix pre:       <https://marine.gov.scot/metadata/saved/rap_service_v0.3/66f1b101-7c04-4413-9258-48ae938cf260/manifest_pre#> .
@prefix post:      <https://marine.gov.scot/metadata/saved/rap_service_v0.3/66f1b101-7c04-4413-9258-48ae938cf260/manifest_post#> .
@prefix tableinst: <https://marine.gov.scot/metadata/saved/rap_service_v0.3/66f1b101-7c04-4413-9258-48ae938cf260/manifest_post#table_> .
@prefix jobinst:   <https://marine.gov.scot/metadata/saved/rap_service_v0.3/66f1b101-7c04-4413-9258-48ae938cf260/manifest_post#job_> .
@prefix stageinst: <https://marine.gov.scot/metadata/saved/rap_service_v0.3/66f1b101-7c04-4413-9258-48ae938cf260/manifest_post#stage_> .
@prefix result:    <https://marine.gov.scot/metadata/saved/rap_service_v0.3/66f1b101-7c04-4413-9258-48ae938cf260/manifest_post#result_> .

post:RootManifest a saved:ResultsManifest, prov:Entity ;
    rdfs:label "post-processing manifest description" ;
    dcterms:title "Results manifest description for example RootManifest"@en ;
    dcterms:description: "This is an example results description, post processing by the SAVED RAP service/job runner" ;
    dcterms:publisher <https://marine.gov.scot> ;
    pav:derivedFrom pre:RootManifest ;
    pav:createdOn "20240714T105900Z" ;
    pav:version "1" ;
    pav:createdAt <https://marine.gov.scot/metadata/saved/rap_service_v0.3/66f1b101-7c04-4413-9258-48ae938cf260/manifest_post.ttl> ;
    dcat:downloadURL <https://marine.gov.scot/metadata/saved/rap_service_v0.3/66f1b101-7c04-4413-9258-48ae938cf260/manifest_post.ttl> ;
    dcat:mediaType "text/turtle" ;
    
    # These really belong to the notion of a data catalogue
    rdr:language "eng" ;
    rdr:repositoryName "RAP service for SAVED" ;
    rdr:type "multidisciplinary" ;
    rdr:subjectName "sustainable aquaculture" ;
    rdr:software: "saved_rap" ;
    rdr:api: "0.3" ;
    rdr:apiUrl service:sparqlSink ;
    rdr:apiDocumentation service:sparqlDoc ;
    rdr:versioning "yes" ;
    rdr:dataAccessType "open" ;
    rdr:dataUploadType "restricted" ;
    rdr:remarks "For now, all data are considered open-access, with appropriate license" ;
    rdr:missionStatementUrl <https://marine.gov.scot/metadata/saved/> ;
        
    saved:tables tableinst:sampling, tableinst:time_density_simple ;
    saved:jobs jobinst:example_time_density_simple ;
    saved:stages stage:monitor_gcp, stage:fetch_gcp, stage:job_producer, stage:job_runner, stage:bakery_prep, stage:bakery_comp;
    saved:results result:example_time_density_simple .

# Defining these here so I can think about these in the same context as
# this post-processing manifest
# I think that these should actually be generated by fisdat/fisup, and
# ideally shouldn't be repeated. However, these may have to be declared
# here, given we may be substituting the canonical URIs where they
# referred to local files before:

<density.csv> a dcat:DataSet ;
    rdfs:label "CSV data file containing sample densities" ;
    pav:createdWith <https://www.r-project.org/> ;
    pav:createdOn "19700101T000000Z" ;
    dcat:title "Example time/density file" ;
    dcat:description "This input file is derived from the time/density example, in turn derived from the sentinel cages sampling example set" ;
    dcat:license <https://www.nationalarchives.gov.uk/doc/open-government-licence/version/3/> ;
    dcat:downloadURL <https://marine.gov.scot/metadata/saved/rap_service_v0.3/66f1b101-7c04-4413-9258-48ae938cf260/density.csv> ;
    dcat:mediaType "text/csv" ;
    dcat:format "text/csv" .
    
<cagedata-10.csv> a dcat:DataSet ;
    rdfs:label "CSV data file containing adult female lice counts and time information" ;
    pav:createdWith <https://www.r-project.org/> ;
    pav:createdOn "19700101T000000Z" ;
    dcat:title "Example cage data file" ;
    dcat:description "This input file is derived from the time/density example, in turn derived from the sentinel cages sampling example set" ;
    dcat:license <https://www.nationalarchives.gov.uk/doc/open-government-licence/version/3/> ;
    dcat:downloadURL <https://marine.gov.scot/metadata/saved/rap_service_v0.3/66f1b101-7c04-4413-9258-48ae938cf260/cagedata-10.csv> ;
    dcat:mediaType "text/csv" ;
    dcat:format "text/csv" .
    
jobinst:example_time_density_simple a saved:JobDesc ;
# pav:derivedFrom pre:job_example_time_density_simple ;
    rdfs:label "Invocation of example time/density ODE model job" ; # to be added by fisdat/fisup
    pav:createdWith service:fisdat, service:fisup ;
    dcterms:title "Example job time_density_simple" ;
    job:scope_collected [ a saved:ScopeDesc ;
            saved:column "TOTAL" ;
            saved:table <cagedata-10.csv> ;
            saved:variable saved:lice_af_total ] ;
    job:scope_modelled [ a saved:ScopeDesc ;
            saved:column "time" ;
            saved:table <density.csv> ;
            saved:variable saved:time ],
        [ a saved:ScopeDesc ;
            saved:column "density" ;
            saved:table <density.csv> ;
            saved:variable saved:density ] ;
    job:type "density" .
    
result:example_time_density_simple a saved:ResultDesc ;
    rdfs:label "Result of example time/density ODE model job" ;
    pav:createdAt <https://marine.gov.scot/metadata/saved/rap_service_v0.3/66f1b101-7c04-4413-9258-48ae938cf260/result_example_time_density_simple.json> ;
    pav:createdWith service:application, stage:job_runner ;
    dcat:downloadURL <https://marine.gov.scot/metadata/saved/rap_service_v0.3/66f1b101-7c04-4413-9258-48ae938cf260/result_example_time_density_simple.json> ;
    dcat:mediaType "text/json" ;
    dcat:format "text/json" .


# The RAP stages have three elements to them which effectively map to the PROV-O ontology:

# 1. A given job event which is to be processed: prov:Entity
# 2. The processing proper of the job event:     prov:Activity
# 3. The stage which processes the job event:    prov:Agent

# Rough idea:
# 
# First, the BEAM runs our OTP application, which is based on gen_stage.
# The stages themselves are processes like gen_server which are started,
# and respond to messages, with gen_stage handling backpressure for us.
# So, the stages are themselves an Entity. I guess the relevant Activity
# which we want to express here is when the stages were started.
# The RAP program itself is probably also an Entity, as well.
#
# Second, the stages themselves do some kind of processing, on a given
# job event. This post-processing manifest concerns itself with *one* job
# event per job description.
#
# Finally, there is a link between the different activities and the
# different stages, in terms of stages subscribing to each other. There
# may be other relations which we should record, namely there are certain
# stages which occur in parallel, but can be exchanged for each other.
# For instance, monitoring local storage occurs at the same time as
# monitoring e.g. GCP or some local object store, so we might use
# something like prov:alternateOf. The aspect of this which we're
# primarily recording is which stages are associated with a given job
# event, and this may be the way to do it.
# 
# So, let's say there's two jobs declared per manifest submitted.
# At minimum, we record the invocation of stages. For now, assume that
# the jobs are going through  more or less the same stages, i.e. the
# stages aren't being started dynamically, because starting stages
# dynamically would probably involve ConsumerSupervisor and recording the
# link between this and the other stages may be non-trivial.
# (I was mostly interested in doing this for the very last stage with
# ConsumerSupervisor, to re-generate HTML documentation efficiently.
# Then, there would be an Activity recorded for each job invoked.)


# Agents (to be moved into separate vocabulary)
service:application a saved:RAPInstance, prov:SoftwareAgent ;
    rdfs:label "RAP application description" .

service:fisdat a saved:LocalUtilitiesInstance, prov:SoftwareAgent ;
    rdfs:label "fisdat(1) validation and manifest preparation program description" .

service:fisup a saved:LocalUtilitiesInstance, prov:SoftwareAgent ;
    rdfs:label "fisup(1) data conversion/upload program description" .

post:application_invocation a saved:RAPInvocation, prov:Activity ;
    rdfs:label "RAP application invocation description" ;
    rdr:software "saved_rap" ;
    saved:beam_application "RAP" ;
    saved:beam_node "nonode" ;
    saved:beam_host "nohost" ;
    saved:beam_module "Elixir.RAP" ;
    saved:otp_version "27" ;
    saved:elixir_version "1.16.2" ;
    saved:rap_interval 300 ;
    saved:rap_index_file ".index" ;
    saved:gcp_bucket "saved_rap_test" ;
    saved:rap_local_directory "./data_cache" ;
    saved:rap_bakery_directory "./bakery" ;
    saved:linked_result_stem "manifest_post" ;
    saved:rap_html_directory "./html_fragments" ;
    pav:version "0.3" ;
    prov:wasAssociatedWith service:application ;
    prov:startedAtTime "20240714T105000Z" .
   # prov:generated post:RootManifestResults .
    

stage:monitor_gcp a saved:RAPStage, prov:SoftwareAgent ;
    rdfs:label "Elixir.RAP.Storage.Monitor stage description" .

stage:fetch_gcp a saved:RAPStage, prov:SoftwareAgent ;
    rdfs:label "Elixir.RAP.Storage.GCP stage description" .

stage:job_producer a saved:RAPStage, prov:SoftwareAgent ;
    rdfs:label "Elixir.RAP.Job.Producer stage description" .

stage:job_runner a saved:RAPStage, prov:SoftwareAgent ;
    rdfs:label "Elixir.RAP.Job.Runner stage description" .

stage:bakery_prep a saved:RAPStage, prov:SoftwareAgent ;
    rdfs:label "Elixir.RAP.Bakery.Prepare stage description" .
    
ext:density_count_ode a saved:ExtCall, prov:SoftwareAgent ;
    rdfs:label "density_count_ode external program description" ;
    saved:exec_python true ;
    saved:exec_versions "3.9", "3.10", "3.11", "3.12" ;
    saved:exec_name "density_count_ode.py" .

# Activities and generated/used entities
## Invocation of the stages, time stamps may be very different to the job depending on when the RAP service / pipeline program was started

stageinst:monitor_gcp_invocation a saved:RAPStageInvocation, prov:Activity ;
    rdfs:label "Elixir.RAP.Storage.Monitor stage invocation activity" ;
    rdr:software "saved_rap" ;
    saved:mix_profile "dev" ;
    saved:beam_application "Elixir.RAP" ;
    saved:beam_node "nonode" ;
    saved:beam_host "nohost" ;
    saved:beam_module "Elixir.RAP.Storage.Monitor" ;
    saved:gen_stage_type "producer" ;
    saved:gen_stage_subscriptions "nil" ;
    saved:gen_stage_dispatcher "Elixir.BroadcastDispatcher" ;
    pav:version "0.3" ;
    prov:startedAtTime "20240714T105900Z" ;
    prov:wasAssociatedWith stage:monitor_gcp .

stageinst:fetch_gcp_invocation a saved:RAPStageInvocation, prov:Activity ;
    rdfs:label "Elixir.RAP.Storage.GCP stage invocation activity" ;
    rdr:software "saved_rap" ;
    saved:mix_profile "dev" ;
    saved:beam_application "Elixir.RAP" ;
    saved:beam_node "nonode" ;
    saved:beam_host "nohost" ;
    saved:beam_module "Elixir.RAP.Storage.GCP" ;
    saved:gen_stage_type "producer_consumer" ;
    saved:gen_stage_subscriptions "Elixir.RAP.Storage.Monitor" ;
    saved:gen_stage_dispatcher "Elixir.BroadcastDispatcher" ;
    pav:version "0.3" ;
    prov:startedAtTime "20240714T105900Z" ;
    prov:wasAssociatedWith stage:fetch_gcp .

stageinst:job_producer_invocation a saved:RAPStageInvocation, prov:Activity ;
    rdfs:label "Elixir.RAP.Job.Producer stage invocation activity" ;
    rdr:software "saved_rap" ;
    saved:mix_profile "dev" ;
    saved:beam_application "Elixir.RAP" ;
    saved:beam_node "nonode" ;
    saved:beam_host "nohost" ;
    saved:beam_module "Elixir.RAP.Job.Producer" ;
    saved:gen_stage_type "producer_consumer" ;
    saved:gen_stage_subscriptions "Elixir.RAP.Storage.GCP" ;
    saved:gen_stage_dispatcher "Elixir.BroadcastDispatcher" ;
    pav:version "0.3" ;
    prov:startedAtTime "20240714T105900Z" ;
    prov:wasAssociatedWith stage:job_producer .

stageinst:job_runner_invocation a saved:RAPStageInvocation, prov:Activity ;
    rdfs:label "Elixir.RAP.Job.Runner stage invocation activity" ;
    rdr:software "saved_rap" ;
    saved:mix_profile "dev" ;
    saved:beam_application "Elixir.RAP" ;
    saved:beam_node "nonode" ;
    saved:beam_host "nohost" ;
    saved:beam_module "Elixir.RAP.Job.Runner" ;
    saved:gen_stage_type "producer_consumer" ;
    saved:gen_stage_subscriptions "Elixir.RAP.Job.Producer" ;
    saved:gen_stage_dispatcher "Elixir.BroadcastDispatcher" ;
    saved:invoked_call ext:density_count_ode ;
    pav:version "0.3" ;
    prov:startedAtTime "20240714T105900Z" ;
    prov:wasAssociatedWith stage:job_runner .

stageinst:bakery_prep_invocation a saved:RAPStageInvocation, prov:Activity ;
    rdfs:label "Elixir.RAP.Bakery.Prepare stage invocation activity" ;
    rdr:software "saved_rap" ;
    saved:mix_profile "dev" ;
    saved:beam_application "Elixir.RAP" ;
    saved:beam_node "nonode" ;
    saved:beam_host "nohost" ;
    saved:beam_module "Elixir.RAP.Bakery.Prepare" ;
    saved:gen_stage_type "producer_consumer" ;
    saved:gen_stage_subscriptions "Elixir.RAP.Job.Runner" ;
    saved:gen_stage_dispatcher "Elixir.BroadcastDispatcher" ;
    pav:version "0.3" ;
    prov:startedAtTime "20240714T105900Z" ;
    prov:wasAssociatedWith stage:bakery_prep .


## Monitor stage
##' Note that the initial entity is not derived from any previous empty as the monitor process generates it.
stageinst:monitor_gcp_process_job0 a saved:RAPStageOutput, prov:Activity ;
    rdfs:label "Elixir.RAP.Storage.Monitor stage event-processing activity" ;
    prov:startedAtTime "20240714T110000Z" ;
    prov:endedAtTime   "20240714T110100Z" ;
    prov:wasAssociatedWith stage:monitor_gcp ;
    prov:generated stageinst:monitor_gcp_output_job0 .
    
stageinst:monitor_gcp_output_job0 a saved:RAPStageIntermediary, prov:Entity ;
    rdfs:label "Elixir.RAP.Storage.Monitor intermediate output entity" .

## Object fetching stage
stageinst:fetch_gcp_process_job0 a saved:RAPStageResponse, prov:Activity ;
    rdfs:label "Elixir.RAP.Storage.GCP stage event-processing activity" ;
    prov:startedAtTime "20240714T110200Z" ;
    prov:endedAtTime   "20240714T110300Z" ;
    prov:wasAssociatedWith stage:fetch_gcp ;
    prov:used stageinst:monitor_gcp_output_job0 ;
    prov:generated stageinst:fetch_gcp_output_job0 .
    
stageinst:fetch_gcp_output_job0 a saved:RAPStageIntermediary, prov:Entity ;
    rdfs:label "Elixir.RAP.Storage.GCP intermediate output entity" ;
    prov:wasDerivedFrom stageinst:monitor_gcp_output_job0 .

## Job producer stage
stageinst:job_producer_process_job0 a saved:RAPStageResponse, prov:Activity ;
    rdfs:label "Elixir.RAP.Job.Producer stage event-processing activity" ;
    prov:startedAtTime "20240714T110300Z" ;
    prov:endedAtTime   "20240714T110400Z" ;
    prov:wasAssociatedWith stage:job_producer ;
    prov:used stageinst:fetch_gcp_output_job0 ;
    prov:generated stageinst:job_producer_output_job0 .
    
stageinst:job_producer_output_job0 a saved:RAPStageIntermediary, prov:Entity ;
    rdfs:label "Elixir.RAP.Job.Producer intermediate output entity" ;
    prov:wasDerivedFrom stageinst:fetch_gcp_output_job0 .

## Job runner stage
stageinst:job_runner_process_job0 a saved:RAPStageResponse, prov:Activity ;
    rdfs:label "Elixir.RAP.Job.Runner stage event-processing activity" ;
    prov:startedAtTime "20240714T110300Z" ;
    prov:endedAtTime   "20240714T110400Z" ;
    prov:wasAssociatedWith stage:job_runner ;
    prov:used stageinst:job_producer_output_job0 ;
    prov:generated stageinst:job_runner_output_job0 .
    
stageinst:job_runner_output_job0 a saved:RAPStageIntermediary, prov:Entity ;
    rdfs:label "Elixir.RAP.Job.Runner intermediate output entity" ;
    prov:wasDerivedFrom stageinst:job_producer_output_job0 .
    
## Bakery 'prepare' stage
##' This is the stage which actually generates output.
##' There are quite a few things which this puts in the target directory:
##' 1. Move input data to the directory
##' 2. Serialise results as text
##' 3. Serialise linked post-processing manifest
##'' but NOT HTML documentation generation, which is invoked in the
##'' subsequent stage but can be serialised again just from the local
##'' mnesia cache. Don't consider this for now as this is something we
##'' can regenerate, in contrast to the linked data which is a receipt of
##'' a given pass through the pipeline.
stageinst:bakery_prep_process_job0 a saved:RAPStageResponse, prov:Activity ;
    rdfs:label "Elixir.RAP.Bakery.Prepare stage event-processing activity" ;
    prov:startedAtTime "20240714T110400Z" ;
    prov:endedAtTime   "20240714T110500Z" ;
    prov:wasAssociatedWith stage:bakery_prep ;
    prov:used stageinst:job_runner_output_job0 ;
    prov:generated post:RootManifest, <density.csv>, <cagedata-10.csv>, result:example_time_density_simple .
    
